import { parseRos2idl as parse } from "./parseRos2idl";

const rawAutowareSchemas = [
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/VelocityReport\n#include "std_msgs/msg/Header.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      " VelocityReport.msg")\n    struct VelocityReport {\n      std_msgs::msg::Header header;\n\n      @default (value=0.0)\n      float longitudinal_velocity;\n\n      @default (value=0.0)\n      float lateral_velocity;\n\n      @default (value=0.0)\n      float heading_rate;\n    };\n  };\n};\n\n================================================================================\nIDL: std_msgs/msg/Header\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from std_msgs/msg/Header.msg\n// generated code does not contain a copyright notice\n\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule std_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "Standard metadata for higher-level stamped data types." "\\n"\n      "This is generally used to communicate timestamped data" "\\n"\n      "in a particular coordinate frame.")\n    struct Header {\n      @verbatim (language="comment", text=\n        "Two-integer timestamp that is expressed as seconds and nanoseconds.")\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        "Transform frame with which this data is associated.")\n      string frame_id;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/TurnIndicatorsReport\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    module TurnIndicatorsReport_Constants {\n      const uint8 DISABLE = 1;\n      const uint8 ENABLE_LEFT = 2;\n      const uint8 ENABLE_RIGHT = 3;\n    };\n\n    struct TurnIndicatorsReport {\n      builtin_interfaces::msg::Time stamp;\n\n      @default (value=0)\n      uint8 report;\n    };\n  };\n};\n\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_system_msgs/msg/HazardStatusStamped\n#include "builtin_interfaces/msg/Time.idl"\n#include "autoware_auto_system_msgs/msg/HazardStatus.idl"\n\nmodule autoware_auto_system_msgs {\n  module msg {\n\n    @verbatim (language="comment", text=\n      " A message for reporting the hazard status with timestamp.")\n    struct HazardStatusStamped {\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        " Contains the hazard status with diagnostics information.")\n      autoware_auto_system_msgs::msg::HazardStatus status;\n    };\n  };\n};\n\n\n================================================================================\nIDL: autoware_auto_system_msgs/msg/HazardStatus\n#include "diagnostic_msgs/msg/DiagnosticStatus.idl"\n\nmodule autoware_auto_system_msgs {\n  module msg {\n    module HazardStatus_Constants {\n      const uint8 NO_FAULT = 0;\n      const uint8 SAFE_FAULT = 1;\n      const uint8 LATENT_FAULT = 2;\n      const uint8 SINGLE_POINT_FAULT = 3;\n    };\n\n    @verbatim (language="comment", text=\n      " A message for reporting the hazard status.")\n    struct HazardStatus {\n\n      @verbatim (language="comment", text=\n        " Determines the hazard level.")\n      @default (value=0)\n      uint8 level;\n\n      @verbatim (language="comment", text=\n        " Determines whether the vehicle is in the emergency state.")\n      @default (value=FALSE)\n      boolean emergency;\n\n      @verbatim (language="comment", text=\n        " Determines whether the vehicle emergency state should be held.")\n      @default (value=FALSE)\n      boolean emergency_holding;\n\n      @verbatim (language="comment", text=\n        " Diagnostics categorized as no fault.")\n      sequence<diagnostic_msgs::msg::DiagnosticStatus> diag_no_fault;\n\n      @verbatim (language="comment", text=\n        " Diagnostics categorized as safe fault.")\n      sequence<diagnostic_msgs::msg::DiagnosticStatus> diag_safe_fault;\n\n      @verbatim (language="comment", text=\n        " Diagnostics categorized as latent fault.")\n      sequence<diagnostic_msgs::msg::DiagnosticStatus> diag_latent_fault;\n\n      @verbatim (language="comment", text=\n        " Diagnostics categorized as single point fault.")\n      sequence<diagnostic_msgs::msg::DiagnosticStatus> diag_single_point_fault;\n    };\n  };\n};\n\n\n================================================================================\nIDL: diagnostic_msgs/msg/DiagnosticStatus\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from diagnostic_msgs/msg/DiagnosticStatus.msg\n// generated code does not contain a copyright notice\n\n#include "diagnostic_msgs/msg/KeyValue.idl"\n\nmodule diagnostic_msgs {\n  module msg {\n    module DiagnosticStatus_Constants {\n      @verbatim (language="comment", text=\n        "Possible levels of operations.")\n      const octet OK = 0;\n      const octet WARN = 1;\n      const octet ERROR = 2;\n      const octet STALE = 3;\n    };\n    @verbatim (language="comment", text=\n      "This message holds the status of an individual component of the robot.")\n    struct DiagnosticStatus {\n      @verbatim (language="comment", text=\n        "Level of operation enumerated above.")\n      octet level;\n\n      @verbatim (language="comment", text=\n        "A description of the test/component reporting.")\n      string name;\n\n      @verbatim (language="comment", text=\n        "A description of the status.")\n      string message;\n\n      @verbatim (language="comment", text=\n        "A hardware unique string.")\n      string hardware_id;\n\n      @verbatim (language="comment", text=\n        "An array of values associated with the status.")\n      sequence<diagnostic_msgs::msg::KeyValue> values;\n    };\n  };\n};\n\n================================================================================\nIDL: diagnostic_msgs/msg/KeyValue\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from diagnostic_msgs/msg/KeyValue.msg\n// generated code does not contain a copyright notice\n\n\nmodule diagnostic_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "What to label this value when viewing.")\n    struct KeyValue {\n      string key;\n\n      @verbatim (language="comment", text=\n        "A value to track over time.")\n      string value;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/SteeringReport\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      " SteeringReport.msg")\n    struct SteeringReport {\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        " Desired angle of the steering tire in radians left (positive)"\n        " or right (negative) of center (0.0)")\n      @default (value=0.0)\n      float steering_tire_angle;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/GearReport\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    module GearReport_Constants {\n      const uint8 NONE = 0;\n      const uint8 NEUTRAL = 1;\n      const uint8 DRIVE = 2;\n      const uint8 DRIVE_2 = 3;\n      const uint8 DRIVE_3 = 4;\n      const uint8 DRIVE_4 = 5;\n      const uint8 DRIVE_5 = 6;\n      const uint8 DRIVE_6 = 7;\n      const uint8 DRIVE_7 = 8;\n      const uint8 DRIVE_8 = 9;\n      const uint8 DRIVE_9 = 10;\n      const uint8 DRIVE_10 = 11;\n      const uint8 DRIVE_11 = 12;\n      const uint8 DRIVE_12 = 13;\n      const uint8 DRIVE_13 = 14;\n      const uint8 DRIVE_14 = 15;\n      const uint8 DRIVE_15 = 16;\n      const uint8 DRIVE_16 = 17;\n      const uint8 DRIVE_17 = 18;\n      const uint8 DRIVE_18 = 19;\n      const uint8 REVERSE = 20;\n      const uint8 REVERSE_2 = 21;\n      const uint8 PARK = 22;\n      const uint8 LOW = 23;\n      const uint8 LOW_2 = 24;\n    };\n\n    struct GearReport {\n      builtin_interfaces::msg::Time stamp;\n\n      @default (value=0)\n      uint8 report;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/HazardLightsReport\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    module HazardLightsReport_Constants {\n      const uint8 DISABLE = 1;\n      const uint8 ENABLE = 2;\n    };\n\n    struct HazardLightsReport {\n      builtin_interfaces::msg::Time stamp;\n\n      @default (value=0)\n      uint8 report;\n    };\n  };\n};\n\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/GearCommand\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    module GearCommand_Constants {\n      const uint8 NONE = 0;\n      const uint8 NEUTRAL = 1;\n      const uint8 DRIVE = 2;\n      const uint8 DRIVE_2 = 3;\n      const uint8 DRIVE_3 = 4;\n      const uint8 DRIVE_4 = 5;\n      const uint8 DRIVE_5 = 6;\n      const uint8 DRIVE_6 = 7;\n      const uint8 DRIVE_7 = 8;\n      const uint8 DRIVE_8 = 9;\n      const uint8 DRIVE_9 = 10;\n      const uint8 DRIVE_10 = 11;\n      const uint8 DRIVE_11 = 12;\n      const uint8 DRIVE_12 = 13;\n      const uint8 DRIVE_13 = 14;\n      const uint8 DRIVE_14 = 15;\n      const uint8 DRIVE_15 = 16;\n      const uint8 DRIVE_16 = 17;\n      const uint8 DRIVE_17 = 18;\n      const uint8 DRIVE_18 = 19;\n      const uint8 REVERSE = 20;\n      const uint8 REVERSE_2 = 21;\n      const uint8 PARK = 22;\n      const uint8 LOW = 23;\n      const uint8 LOW_2 = 24;\n    };\n\n    struct GearCommand {\n      builtin_interfaces::msg::Time stamp;\n\n      @default (value=0)\n      uint8 command;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/HazardLightsCommand\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    module HazardLightsCommand_Constants {\n      const uint8 NO_COMMAND = 0;\n      const uint8 DISABLE = 1;\n      const uint8 ENABLE = 2;\n    };\n\n    @verbatim (language="comment", text=\n    " Command for controlling a vehicle\'s hazard lights.")\n\n    struct HazardLightsCommand {\n      builtin_interfaces::msg::Time stamp;\n\n      @default (value=0)\n      uint8 command;\n    };\n  };\n};\n\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_planning_msgs/msg/Trajectory\n#include "autoware_auto_planning_msgs/msg/TrajectoryPoint.idl"\n#include "std_msgs/msg/Header.idl"\n\nmodule autoware_auto_planning_msgs {\n  module msg {\n    module Trajectory_Constants {\n      const uint32 CAPACITY = 10000;\n    };\n    @verbatim (language="comment", text=\n      " A set of trajectory points for the controller")\n    struct Trajectory {\n      std_msgs::msg::Header header;\n\n      sequence<autoware_auto_planning_msgs::msg::TrajectoryPoint, 10000> points;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_planning_msgs/msg/TrajectoryPoint\n#include "builtin_interfaces/msg/Duration.idl"\n\nmodule autoware_auto_planning_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      " Representation of a trajectory point for the controller")\n    struct TrajectoryPoint {\n      builtin_interfaces::msg::Duration time_from_start;\n\n      geometry_msgs::msg::Pose pose;\n\n      @default (value=0.0)\n      float longitudinal_velocity_mps;\n\n      @default (value=0.0)\n      float lateral_velocity_mps;\n\n      @default (value=0.0)\n      float acceleration_mps2;\n\n      @default (value=0.0)\n      float heading_rate_rps;\n\n      @default (value=0.0)\n      float front_wheel_angle_rad;\n\n      @default (value=0.0)\n      float rear_wheel_angle_rad;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Duration\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Duration.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "Duration defines a period between two time points." "\\n"\n      "Messages of this datatype are of ROS Time following this design:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Duration {\n      @verbatim (language="comment", text=\n        "Seconds component, range is valid over any possible int32 value.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "Nanoseconds component in the range of [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n\n================================================================================\nIDL: std_msgs/msg/Header\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from std_msgs/msg/Header.msg\n// generated code does not contain a copyright notice\n\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule std_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "Standard metadata for higher-level stamped data types." "\\n"\n      "This is generally used to communicate timestamped data" "\\n"\n      "in a particular coordinate frame.")\n    struct Header {\n      @verbatim (language="comment", text=\n        "Two-integer timestamp that is expressed as seconds and nanoseconds.")\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        "Transform frame with which this data is associated.")\n      string frame_id;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/ControlModeReport\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    module ControlModeReport_Constants {\n      const uint8 NO_COMMAND = 0;\n      const uint8 AUTONOMOUS = 1;\n      const uint8 AUTONOMOUS_STEER_ONLY = 2;\n      const uint8 AUTONOMOUS_VELOCITY_ONLY = 3;\n      const uint8 MANUAL = 4;\n      const uint8 DISENGAGED = 5;\n      const uint8 NOT_READY = 6;\n    };\n    @verbatim (language="comment", text=\n      " ControlModeReport.msg")\n\n    struct ControlModeReport {\n      builtin_interfaces::msg::Time stamp;\n\n      @default (value=0)\n      uint8 mode;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/Engage\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n\n    @verbatim (language="comment", text=\n      " Command for controlling the engagement state of the vehicle.")\n    struct Engage {\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        " Determines if a vehicle should be engaged.")\n      @default (value=FALSE)\n      boolean engage;\n    };\n  };\n};\n\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_vehicle_msgs/msg/TurnIndicatorsCommand\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_vehicle_msgs {\n  module msg {\n    module TurnIndicatorsCommand_Constants {\n      const uint8 NO_COMMAND = 0;\n      const uint8 DISABLE = 1;\n      const uint8 ENABLE_LEFT = 2;\n      const uint8 ENABLE_RIGHT = 3;\n    };\n\n    @verbatim (language="comment", text=\n    " Command for controlling turn indicators.")\n\n    struct TurnIndicatorsCommand {\n      builtin_interfaces::msg::Time stamp;\n\n      @default (value=0)\n      uint8 command;\n    };\n  };\n};\n\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_control_msgs/msg/AckermannControlCommand\n#include "autoware_auto_control_msgs/msg/AckermannLateralCommand.idl"\n#include "autoware_auto_control_msgs/msg/LongitudinalCommand.idl"\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_control_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      " Lateral and longitudinal control message for Ackermann-style platforms")\n    struct AckermannControlCommand {\n      builtin_interfaces::msg::Time stamp;\n\n      autoware_auto_control_msgs::msg::AckermannLateralCommand lateral;\n      autoware_auto_control_msgs::msg::LongitudinalCommand longitudinal;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_control_msgs/msg/AckermannLateralCommand\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_control_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      " Lateral control message for Ackermann-style platforms" "\\n"\n      " Note regarding tires: If the platform has multiple steering tires, the commands"\n      " given here are for a virtual tire at the average lateral position of the steering tires.")\n\n    struct AckermannLateralCommand {\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        " Desired angle of the steering tire in radians left (positive)"\n        " or right (negative) of center (0.0)")\n      @default (value=0.0)\n      float steering_tire_angle;\n\n      @verbatim (language="comment", text=\n        " Desired rate of change of the steering tire angle in radians per second")\n      @default (value=0.0)\n      float steering_tire_rotation_rate;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_control_msgs/msg/LongitudinalCommand\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_control_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      " Longitudinal control message for all vehicle types")\n\n    struct LongitudinalCommand {\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        " Desired platform speed in meters per second."\n        " A positive value indicates movement in the positive X direction of the vehicle "\n        " while a negative value indicates movement in the negative X direction of the vehicle.")\n      @default (value=0.0)\n      float speed;\n\n      @verbatim (language="comment", text=\n        " Desired platform acceleration in meters per second squared."\n        " A positive value indicates acceleration while a negative value indicates deceleration.")\n      @default (value=0.0)\n      float acceleration;\n\n      @verbatim (language="comment", text=\n        " Desired platform jerk in meters per second cubed")\n      @default (value=0.0)\n      float jerk;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_planning_msgs/msg/Path\n#include "autoware_auto_planning_msgs/msg/PathPoint.idl"\n#include "nav_msgs/msg/OccupancyGrid.idl"\n#include "std_msgs/msg/Header.idl"\n\nmodule autoware_auto_planning_msgs {\n  module msg {\n    @verbatim (language = "comment", text=\n      "Contains a PathPoint path and left and right bound.")\n    struct Path {\n      std_msgs::msg::Header header;\n      sequence<autoware_auto_planning_msgs::msg::PathPoint> points;\n      sequence<geometry_msgs::msg::Point> left_bound;\n      sequence<geometry_msgs::msg::Point> right_bound;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_planning_msgs/msg/PathPoint\n#include "geometry_msgs/msg/Pose.idl"\n#include "geometry_msgs/msg/Twist.idl"\n\nmodule autoware_auto_planning_msgs {\n  module msg {\n    @verbatim (language = "comment", text=\n      "Represents a pose from a lanelet map, contains twist information.")\n    struct PathPoint {\n      geometry_msgs::msg::Pose pose;\n\n      @default (value=0.0)\n      float longitudinal_velocity_mps;\n\n      @default (value=0.0)\n      float lateral_velocity_mps;\n\n      @default (value=0.0)\n      float heading_rate_rps;\n\n      @verbatim(language = "comment", text =\n        "Denotes that the point is final, doesn\'t need further updates.")\n      @default (value = FALSE)\n      boolean is_final;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Pose\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Pose.msg\n// generated code does not contain a copyright notice\n\n#include "geometry_msgs/msg/Point.idl"\n#include "geometry_msgs/msg/Quaternion.idl"\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "A representation of pose in free space, composed of position and orientation.")\n    struct Pose {\n      geometry_msgs::msg::Point position;\n\n      geometry_msgs::msg::Quaternion orientation;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Point\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Point.msg\n// generated code does not contain a copyright notice\n\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This contains the position of a point in free space")\n    struct Point {\n      double x;\n\n      double y;\n\n      double z;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Quaternion\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Quaternion.msg\n// generated code does not contain a copyright notice\n\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This represents an orientation in free space in quaternion form.")\n    struct Quaternion {\n      @default (value=0.0)\n      double x;\n\n      @default (value=0.0)\n      double y;\n\n      @default (value=0.0)\n      double z;\n\n      @default (value=1.0)\n      double w;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Twist\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Twist.msg\n// generated code does not contain a copyright notice\n\n#include "geometry_msgs/msg/Vector3.idl"\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This expresses velocity in free space broken into its linear and angular parts.")\n    struct Twist {\n      geometry_msgs::msg::Vector3 linear;\n\n      geometry_msgs::msg::Vector3 angular;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Vector3\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Vector3.msg\n// generated code does not contain a copyright notice\n\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This represents a vector in free space.")\n    struct Vector3 {\n      @verbatim (language="comment", text=\n        "This is semantically different than a point." "\\n"\n        "A vector is always anchored at the origin." "\\n"\n        "When a transform is applied to a vector, only the rotational component is applied.")\n      double x;\n\n      double y;\n\n      double z;\n    };\n  };\n};\n\n================================================================================\nIDL: nav_msgs/msg/OccupancyGrid\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from nav_msgs/msg/OccupancyGrid.msg\n// generated code does not contain a copyright notice\n\n#include "nav_msgs/msg/MapMetaData.idl"\n#include "std_msgs/msg/Header.idl"\n\nmodule nav_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This represents a 2-D grid map")\n    struct OccupancyGrid {\n      std_msgs::msg::Header header;\n\n      @verbatim (language="comment", text=\n        "MetaData for the map")\n      nav_msgs::msg::MapMetaData info;\n\n      @verbatim (language="comment", text=\n        "The map data, in row-major order, starting with (0,0)." "\\n"\n        "Cell (1, 0) will be listed second, representing the next cell in the x direction." "\\n"\n        "Cell (0, 1) will be at the index equal to info.width, followed by (1, 1)." "\\n"\n        "The values inside are application dependent, but frequently," "\\n"\n        "0 represents unoccupied, 1 represents definitely occupied, and" "\\n"\n        "-1 represents unknown.")\n      sequence<int8> data;\n    };\n  };\n};\n\n================================================================================\nIDL: nav_msgs/msg/MapMetaData\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from nav_msgs/msg/MapMetaData.msg\n// generated code does not contain a copyright notice\n\n#include "builtin_interfaces/msg/Time.idl"\n#include "geometry_msgs/msg/Pose.idl"\n\nmodule nav_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This hold basic information about the characteristics of the OccupancyGrid")\n    struct MapMetaData {\n      @verbatim (language="comment", text=\n        "The time at which the map was loaded")\n      builtin_interfaces::msg::Time map_load_time;\n\n      @verbatim (language="comment", text=\n        "The map resolution")\n      @unit (value="m/cell")\n      float resolution;\n\n      @verbatim (language="comment", text=\n        "Map width")\n      @unit (value="cells")\n      uint32 width;\n\n      @verbatim (language="comment", text=\n        "Map height")\n      @unit (value="cells")\n      uint32 height;\n\n      @verbatim (language="comment", text=\n        "The origin of the map [m, m, rad].  This is the real-world pose of the" "\\n"\n        "bottom left corner of cell (0,0) in the map.")\n      geometry_msgs::msg::Pose origin;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n\n================================================================================\nIDL: std_msgs/msg/Header\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from std_msgs/msg/Header.msg\n// generated code does not contain a copyright notice\n\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule std_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "Standard metadata for higher-level stamped data types." "\\n"\n      "This is generally used to communicate timestamped data" "\\n"\n      "in a particular coordinate frame.")\n    struct Header {\n      @verbatim (language="comment", text=\n        "Two-integer timestamp that is expressed as seconds and nanoseconds.")\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        "Transform frame with which this data is associated.")\n      string frame_id;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_planning_msgs/msg/PathWithLaneId\n#include "autoware_auto_planning_msgs/msg/PathPointWithLaneId.idl"\n#include "nav_msgs/msg/OccupancyGrid.idl"\n#include "std_msgs/msg/Header.idl"\n\nmodule autoware_auto_planning_msgs {\n  module msg {\n    @verbatim (language = "comment", text=\n      "Contains a PathPointWithLaneId path and left and right bound.")\n    struct PathWithLaneId {\n      std_msgs::msg::Header header;\n      sequence<autoware_auto_planning_msgs::msg::PathPointWithLaneId> points;\n      sequence<geometry_msgs::msg::Point> left_bound;\n      sequence<geometry_msgs::msg::Point> right_bound;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_planning_msgs/msg/PathPointWithLaneId\n#include "autoware_auto_planning_msgs/msg/PathPoint.idl"\n\nmodule autoware_auto_planning_msgs {\n  module msg {\n    @verbatim (language = "comment", text=\n      "Contains a PathPoint and lanelet lane_id information.")\n    struct PathPointWithLaneId {\n      autoware_auto_planning_msgs::msg::PathPoint point;\n\n      @verbatim(language = "comment", text =\n        "Lanelet lane_id information.")\n      sequence<int64> lane_ids;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_planning_msgs/msg/PathPoint\n#include "geometry_msgs/msg/Pose.idl"\n#include "geometry_msgs/msg/Twist.idl"\n\nmodule autoware_auto_planning_msgs {\n  module msg {\n    @verbatim (language = "comment", text=\n      "Represents a pose from a lanelet map, contains twist information.")\n    struct PathPoint {\n      geometry_msgs::msg::Pose pose;\n\n      @default (value=0.0)\n      float longitudinal_velocity_mps;\n\n      @default (value=0.0)\n      float lateral_velocity_mps;\n\n      @default (value=0.0)\n      float heading_rate_rps;\n\n      @verbatim(language = "comment", text =\n        "Denotes that the point is final, doesn\'t need further updates.")\n      @default (value = FALSE)\n      boolean is_final;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Pose\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Pose.msg\n// generated code does not contain a copyright notice\n\n#include "geometry_msgs/msg/Point.idl"\n#include "geometry_msgs/msg/Quaternion.idl"\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "A representation of pose in free space, composed of position and orientation.")\n    struct Pose {\n      geometry_msgs::msg::Point position;\n\n      geometry_msgs::msg::Quaternion orientation;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Point\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Point.msg\n// generated code does not contain a copyright notice\n\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This contains the position of a point in free space")\n    struct Point {\n      double x;\n\n      double y;\n\n      double z;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Quaternion\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Quaternion.msg\n// generated code does not contain a copyright notice\n\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This represents an orientation in free space in quaternion form.")\n    struct Quaternion {\n      @default (value=0.0)\n      double x;\n\n      @default (value=0.0)\n      double y;\n\n      @default (value=0.0)\n      double z;\n\n      @default (value=1.0)\n      double w;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Twist\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Twist.msg\n// generated code does not contain a copyright notice\n\n#include "geometry_msgs/msg/Vector3.idl"\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This expresses velocity in free space broken into its linear and angular parts.")\n    struct Twist {\n      geometry_msgs::msg::Vector3 linear;\n\n      geometry_msgs::msg::Vector3 angular;\n    };\n  };\n};\n\n================================================================================\nIDL: geometry_msgs/msg/Vector3\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from geometry_msgs/msg/Vector3.msg\n// generated code does not contain a copyright notice\n\n\nmodule geometry_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This represents a vector in free space.")\n    struct Vector3 {\n      @verbatim (language="comment", text=\n        "This is semantically different than a point." "\\n"\n        "A vector is always anchored at the origin." "\\n"\n        "When a transform is applied to a vector, only the rotational component is applied.")\n      double x;\n\n      double y;\n\n      double z;\n    };\n  };\n};\n\n================================================================================\nIDL: nav_msgs/msg/OccupancyGrid\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from nav_msgs/msg/OccupancyGrid.msg\n// generated code does not contain a copyright notice\n\n#include "nav_msgs/msg/MapMetaData.idl"\n#include "std_msgs/msg/Header.idl"\n\nmodule nav_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This represents a 2-D grid map")\n    struct OccupancyGrid {\n      std_msgs::msg::Header header;\n\n      @verbatim (language="comment", text=\n        "MetaData for the map")\n      nav_msgs::msg::MapMetaData info;\n\n      @verbatim (language="comment", text=\n        "The map data, in row-major order, starting with (0,0)." "\\n"\n        "Cell (1, 0) will be listed second, representing the next cell in the x direction." "\\n"\n        "Cell (0, 1) will be at the index equal to info.width, followed by (1, 1)." "\\n"\n        "The values inside are application dependent, but frequently," "\\n"\n        "0 represents unoccupied, 1 represents definitely occupied, and" "\\n"\n        "-1 represents unknown.")\n      sequence<int8> data;\n    };\n  };\n};\n\n================================================================================\nIDL: nav_msgs/msg/MapMetaData\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from nav_msgs/msg/MapMetaData.msg\n// generated code does not contain a copyright notice\n\n#include "builtin_interfaces/msg/Time.idl"\n#include "geometry_msgs/msg/Pose.idl"\n\nmodule nav_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "This hold basic information about the characteristics of the OccupancyGrid")\n    struct MapMetaData {\n      @verbatim (language="comment", text=\n        "The time at which the map was loaded")\n      builtin_interfaces::msg::Time map_load_time;\n\n      @verbatim (language="comment", text=\n        "The map resolution")\n      @unit (value="m/cell")\n      float resolution;\n\n      @verbatim (language="comment", text=\n        "Map width")\n      @unit (value="cells")\n      uint32 width;\n\n      @verbatim (language="comment", text=\n        "Map height")\n      @unit (value="cells")\n      uint32 height;\n\n      @verbatim (language="comment", text=\n        "The origin of the map [m, m, rad].  This is the real-world pose of the" "\\n"\n        "bottom left corner of cell (0,0) in the map.")\n      geometry_msgs::msg::Pose origin;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n\n================================================================================\nIDL: std_msgs/msg/Header\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from std_msgs/msg/Header.msg\n// generated code does not contain a copyright notice\n\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule std_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "Standard metadata for higher-level stamped data types." "\\n"\n      "This is generally used to communicate timestamped data" "\\n"\n      "in a particular coordinate frame.")\n    struct Header {\n      @verbatim (language="comment", text=\n        "Two-integer timestamp that is expressed as seconds and nanoseconds.")\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        "Transform frame with which this data is associated.")\n      string frame_id;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_system_msgs/msg/AutowareState\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule autoware_auto_system_msgs {\n  module msg {\n    module AutowareState_Constants {\n      const uint8 INITIALIZING = 1;\n      const uint8 WAITING_FOR_ROUTE = 2;\n      const uint8 PLANNING = 3;\n      const uint8 WAITING_FOR_ENGAGE = 4;\n      const uint8 DRIVING = 5;\n      const uint8 ARRIVED_GOAL = 6;\n      const uint8 FINALIZING = 7;\n    };\n\n    @verbatim (language="comment", text=\n      " A message for reporting the Autoware system status.")\n    struct AutowareState {\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        " Current state of the Autoware system.")\n      uint8 state;\n    };\n  };\n};\n\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
  '================================================================================\nIDL: autoware_auto_perception_msgs/msg/LookingTrafficSignal\n#include "autoware_auto_perception_msgs/msg/TrafficSignalWithJudge.idl"\n#include "std_msgs/msg/Header.idl"\n\nmodule autoware_auto_perception_msgs {\n  module msg {\n    struct LookingTrafficSignal {\n      std_msgs::msg::Header header;\n      boolean is_module_running;\n      autoware_auto_perception_msgs::msg::TrafficSignalWithJudge perception;\n      autoware_auto_perception_msgs::msg::TrafficSignalWithJudge external;\n      autoware_auto_perception_msgs::msg::TrafficSignalWithJudge result;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_perception_msgs/msg/TrafficSignalWithJudge\n#include "autoware_auto_perception_msgs/msg/TrafficSignal.idl"\n\nmodule autoware_auto_perception_msgs {\n  module msg {\n    module TrafficSignalWithJudge_Constants {\n      const uint8 JUDGE = 1;\n      const uint8 NONE = 2;\n      const uint8 STOP = 3;\n      const uint8 GO = 4;\n    };\n    struct TrafficSignalWithJudge {\n      uint8 judge;\n      boolean has_state;\n      autoware_auto_perception_msgs::msg::TrafficSignal signal;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_perception_msgs/msg/TrafficSignal\n#include "autoware_auto_perception_msgs/msg/TrafficLight.idl"\n\nmodule autoware_auto_perception_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n    " A TrafficSignal is defined here as a group of multiple TrafficLights" "\\n"\n    " which each represent a single light, indicator, or bulb.")\n    struct TrafficSignal {\n      @verbatim (language="comment", text=\n        " A value of 0 indicates an invalid map_primitive_id. Signals which are not"\n        " associated with map primitives should not be used in planning because this"\n        " indicates that the required signal-to-lane mapping is not available.")\n      @default (value=0)\n      int32 map_primitive_id;\n\n      sequence<autoware_auto_perception_msgs::msg::TrafficLight, 10> lights;\n    };\n  };\n};\n\n================================================================================\nIDL: autoware_auto_perception_msgs/msg/TrafficLight\nmodule autoware_auto_perception_msgs {\n  module msg {\n    module TrafficLight_Constants {\n      // constants for color\n      const uint8 RED = 1;\n      const uint8 AMBER = 2;\n      const uint8 GREEN = 3;\n      const uint8 WHITE = 4;\n\n      // constants for shape\n      const uint8 CIRCLE = 5;\n      const uint8 LEFT_ARROW = 6;\n      const uint8 RIGHT_ARROW = 7;\n      const uint8 UP_ARROW = 8;\n      const uint8 DOWN_ARROW = 9;\n      const uint8 DOWN_LEFT_ARROW = 10;\n      const uint8 DOWN_RIGHT_ARROW = 11;\n      const uint8 CROSS = 12;\n\n      // constants for status\n      const uint8 SOLID_OFF = 13;\n      const uint8 SOLID_ON = 14;\n      const uint8 FLASHING = 15;\n\n      // constants for common use\n      const uint8 UNKNOWN = 16;\n    };\n    struct TrafficLight {\n      @default (value=0)\n      uint8 color;\n\n      @default (value=0)\n      uint8 shape;\n\n      @default (value=0)\n      uint8 status;\n\n      @default (value=0.0)\n      float confidence;\n    };\n  };\n};\n\n================================================================================\nIDL: std_msgs/msg/Header\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from std_msgs/msg/Header.msg\n// generated code does not contain a copyright notice\n\n#include "builtin_interfaces/msg/Time.idl"\n\nmodule std_msgs {\n  module msg {\n    @verbatim (language="comment", text=\n      "Standard metadata for higher-level stamped data types." "\\n"\n      "This is generally used to communicate timestamped data" "\\n"\n      "in a particular coordinate frame.")\n    struct Header {\n      @verbatim (language="comment", text=\n        "Two-integer timestamp that is expressed as seconds and nanoseconds.")\n      builtin_interfaces::msg::Time stamp;\n\n      @verbatim (language="comment", text=\n        "Transform frame with which this data is associated.")\n      string frame_id;\n    };\n  };\n};\n\n================================================================================\nIDL: builtin_interfaces/msg/Time\n// generated from rosidl_adapter/resource/msg.idl.em\n// with input from builtin_interfaces/msg/Time.msg\n// generated code does not contain a copyright notice\n\n\nmodule builtin_interfaces {\n  module msg {\n    @verbatim (language="comment", text=\n      "This message communicates ROS Time defined here:" "\\n"\n      "https://design.ros2.org/articles/clock_and_time.html")\n    struct Time {\n      @verbatim (language="comment", text=\n        "The seconds component, valid over all int32 values.")\n      int32 sec;\n\n      @verbatim (language="comment", text=\n        "The nanoseconds component, valid in the range [0, 10e9).")\n      uint32 nanosec;\n    };\n  };\n};\n',
];

// this is just to sanity check against the autoware schemas and make sure we don't fail on intake
// these are the shorter of the schemas generated by autoware
describe("test autoware generated idl schemas", () => {
  const idlRegex = /IDL: ([\w/]*)/;
  const testMap = rawAutowareSchemas.map((schema) => [
    schema.match(idlRegex)![0]!.split("/").pop(),
    schema,
  ]) as [string, string][];
  it.each(testMap)("parses %s", (_idl, schema) => {
    expect(() => parse(schema)).not.toThrow();
  });
});
