"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schemas_1 = require("./schemas");
describe("schemas", () => {
    it("has matching names", () => {
        for (const [key, value] of Object.entries(schemas_1.foxgloveMessageSchemas)) {
            expect(key).toEqual(value.name);
        }
        for (const [key, value] of Object.entries(schemas_1.foxgloveEnumSchemas)) {
            expect(key).toEqual(value.name);
            expect(value.parentSchemaName in schemas_1.foxgloveMessageSchemas).toBe(true);
        }
    });
    const allSchemas = new Set();
    function addNestedSchemas(schema, schemas) {
        if (schemas.has(schema)) {
            return;
        }
        schemas.add(schema);
        for (const field of schema.fields) {
            if (field.type.type === "nested") {
                addNestedSchemas(field.type.schema, schemas);
            }
        }
    }
    const exportedSchemas = Object.values(schemas_1.foxgloveMessageSchemas);
    exportedSchemas.forEach((schema) => addNestedSchemas(schema, allSchemas));
    it.each([...allSchemas])("exports nested schemas - $name", (nestedSchema) => {
        expect(exportedSchemas).toContain(nestedSchema);
    });
    it("has valid descriptions", () => {
        for (const schema of Object.values(schemas_1.foxgloveMessageSchemas)) {
            // Multi-line descriptions are supported for fields, but not currently for schemas
            expect(schema.description.includes("\n")).toBe(false);
            for (const field of schema.fields) {
                expect(field.description.includes("*/")).toBe(false);
            }
        }
    });
});
//# sourceMappingURL=schemas.test.js.map