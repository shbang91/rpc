// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exportTypeScriptSchemas exports schemas 1`] = `
Map {
  "ArrowPrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Pose } from "./Pose";

/** A primitive representing an arrow */
export type ArrowPrimitive = {
  /** Position of the arrow's tail and orientation of the arrow. Identity orientation means the arrow points in the +x direction. */
  pose: Pose;

  /** Length of the arrow shaft */
  shaft_length: number;

  /** Diameter of the arrow shaft */
  shaft_diameter: number;

  /** Length of the arrow head */
  head_length: number;

  /** Diameter of the arrow head */
  head_diameter: number;

  /** Color of the arrow */
  color: Color;
};
",
  "CameraCalibration" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Time } from "./Time";

/** Camera calibration parameters */
export type CameraCalibration = {
  /** Timestamp of calibration data */
  timestamp: Time;

  /** Frame of reference for the camera. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image. */
  frame_id: string;

  /** Image width */
  width: number;

  /** Image height */
  height: number;

  /**
   * Name of distortion model
   * 
   * Supported values: \`plumb_bob\` and \`rational_polynomial\`
   */
  distortion_model: string;

  /** Distortion parameters */
  D: number[];

  /**
   * Intrinsic camera matrix (3x3 row-major matrix)
   * 
   * A 3x3 row-major matrix for the raw (distorted) image.
   * 
   * Projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx, fy) and principal point (cx, cy).
   * 
   * \`\`\`
   *     [fx  0 cx]
   * K = [ 0 fy cy]
   *     [ 0  0  1]
   * \`\`\`
   */
  K: [number, number, number, number, number, number, number, number, number];

  /**
   * Rectification matrix (stereo cameras only, 3x3 row-major matrix)
   * 
   * A rotation matrix aligning the camera coordinate system to the ideal stereo image plane so that epipolar lines in both stereo images are parallel.
   */
  R: [number, number, number, number, number, number, number, number, number];

  /**
   * Projection/camera matrix (3x4 row-major matrix)
   * 
   * \`\`\`
   *     [fx'  0  cx' Tx]
   * P = [ 0  fy' cy' Ty]
   *     [ 0   0   1   0]
   * \`\`\`
   * 
   * By convention, this matrix specifies the intrinsic (camera) matrix of the processed (rectified) image. That is, the left 3x3 portion is the normal camera intrinsic matrix for the rectified image.
   * 
   * It projects 3D points in the camera coordinate frame to 2D pixel coordinates using the focal lengths (fx', fy') and principal point (cx', cy') - these may differ from the values in K.
   * 
   * For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will also have R = the identity and P[1:3,1:3] = K.
   * 
   * For a stereo pair, the fourth column [Tx Ty 0]' is related to the position of the optical center of the second camera in the first camera's frame. We assume Tz = 0 so both cameras are in the same stereo image plane. The first camera always has Tx = Ty = 0. For the right (second) camera of a horizontal stereo pair, Ty = 0 and Tx = -fx' * B, where B is the baseline between the cameras.
   * 
   * Given a 3D point [X Y Z]', the projection (x, y) of the point onto the rectified image is given by:
   * 
   * \`\`\`
   * [u v w]' = P * [X Y Z 1]'
   *        x = u / w
   *        y = v / w
   * \`\`\`
   * 
   * This holds for both images of a stereo pair.
   */
  P: [number, number, number, number, number, number, number, number, number, number, number, number];
};
",
  "CircleAnnotation" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Point2 } from "./Point2";
import { Time } from "./Time";

/** A circle annotation on a 2D image */
export type CircleAnnotation = {
  /** Timestamp of circle */
  timestamp: Time;

  /** Center of the circle in 2D image coordinates (pixels) */
  position: Point2;

  /** Circle diameter in pixels */
  diameter: number;

  /** Line thickness in pixels */
  thickness: number;

  /** Fill color */
  fill_color: Color;

  /** Outline color */
  outline_color: Color;
};
",
  "Color" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** A color in RGBA format */
export type Color = {
  /** Red value between 0 and 1 */
  r: number;

  /** Green value between 0 and 1 */
  g: number;

  /** Blue value between 0 and 1 */
  b: number;

  /** Alpha value between 0 and 1 */
  a: number;
};
",
  "CompressedImage" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Time } from "./Time";

/** A compressed image */
export type CompressedImage = {
  /** Timestamp of image */
  timestamp: Time;

  /** Frame of reference for the image. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image. */
  frame_id: string;

  /** Compressed image data */
  data: Uint8Array;

  /**
   * Image format
   * 
   * Supported values: image media types supported by Chrome, such as \`webp\`, \`jpeg\`, \`png\`
   */
  format: string;
};
",
  "CompressedVideo" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Time } from "./Time";

/** A single frame of a compressed video bitstream */
export type CompressedVideo = {
  /** Timestamp of video frame */
  timestamp: Time;

  /**
   * Frame of reference for the video.
   * 
   * The origin of the frame is the optical center of the camera. +x points to the right in the video, +y points down, and +z points into the plane of the video.
   */
  frame_id: string;

  /**
   * Compressed video frame data.
   * 
   * For packet-based video codecs this data must begin and end on packet boundaries (no partial packets), and must contain enough video packets to decode exactly one image (either a keyframe or delta frame). Note: Foxglove Studio does not support video streams that include B frames because they require lookahead.
   */
  data: Uint8Array;

  /**
   * Video format.
   * 
   * Supported values: \`h264\` (Annex B formatted data only)
   */
  format: string;
};
",
  "CylinderPrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Pose } from "./Pose";
import { Vector3 } from "./Vector3";

/** A primitive representing a cylinder, elliptic cylinder, or truncated cone */
export type CylinderPrimitive = {
  /** Position of the center of the cylinder and orientation of the cylinder. The flat face(s) are perpendicular to the z-axis. */
  pose: Pose;

  /** Size of the cylinder's bounding box */
  size: Vector3;

  /** 0-1, ratio of the diameter of the cylinder's bottom face (min z) to the bottom of the bounding box */
  bottom_scale: number;

  /** 0-1, ratio of the diameter of the cylinder's top face (max z) to the top of the bounding box */
  top_scale: number;

  /** Color of the cylinder */
  color: Color;
};
",
  "CubePrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Pose } from "./Pose";
import { Vector3 } from "./Vector3";

/** A primitive representing a cube or rectangular prism */
export type CubePrimitive = {
  /** Position of the center of the cube and orientation of the cube */
  pose: Pose;

  /** Size of the cube along each axis */
  size: Vector3;

  /** Color of the cube */
  color: Color;
};
",
  "FrameTransform" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Quaternion } from "./Quaternion";
import { Time } from "./Time";
import { Vector3 } from "./Vector3";

/** A transform between two reference frames in 3D space */
export type FrameTransform = {
  /** Timestamp of transform */
  timestamp: Time;

  /** Name of the parent frame */
  parent_frame_id: string;

  /** Name of the child frame */
  child_frame_id: string;

  /** Translation component of the transform */
  translation: Vector3;

  /** Rotation component of the transform */
  rotation: Quaternion;
};
",
  "FrameTransforms" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { FrameTransform } from "./FrameTransform";

/** An array of FrameTransform messages */
export type FrameTransforms = {
  /** Array of transforms */
  transforms: FrameTransform[];
};
",
  "GeoJSON" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** GeoJSON data for annotating maps */
export type GeoJSON = {
  /** GeoJSON data encoded as a UTF-8 string */
  geojson: string;
};
",
  "Grid" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { PackedElementField } from "./PackedElementField";
import { Pose } from "./Pose";
import { Time } from "./Time";
import { Vector2 } from "./Vector2";

/** A 2D grid of data */
export type Grid = {
  /** Timestamp of grid */
  timestamp: Time;

  /** Frame of reference */
  frame_id: string;

  /** Origin of grid's corner relative to frame of reference; grid is positioned in the x-y plane relative to this origin */
  pose: Pose;

  /** Number of grid columns */
  column_count: number;

  /** Size of single grid cell along x and y axes, relative to \`pose\` */
  cell_size: Vector2;

  /** Number of bytes between rows in \`data\` */
  row_stride: number;

  /** Number of bytes between cells within a row in \`data\` */
  cell_stride: number;

  /** Fields in \`data\`. \`red\`, \`green\`, \`blue\`, and \`alpha\` are optional for customizing the grid's color. */
  fields: PackedElementField[];

  /** Grid cell data, interpreted using \`fields\`, in row-major (y-major) order */
  data: Uint8Array;
};
",
  "ImageAnnotations" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { CircleAnnotation } from "./CircleAnnotation";
import { PointsAnnotation } from "./PointsAnnotation";
import { TextAnnotation } from "./TextAnnotation";

/** Array of annotations for a 2D image */
export type ImageAnnotations = {
  /** Circle annotations */
  circles: CircleAnnotation[];

  /** Points annotations */
  points: PointsAnnotation[];

  /** Text annotations */
  texts: TextAnnotation[];
};
",
  "KeyValuePair" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** A key with its associated value */
export type KeyValuePair = {
  /** Key */
  key: string;

  /** Value */
  value: string;
};
",
  "LaserScan" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Pose } from "./Pose";
import { Time } from "./Time";

/** A single scan from a planar laser range-finder */
export type LaserScan = {
  /** Timestamp of scan */
  timestamp: Time;

  /** Frame of reference */
  frame_id: string;

  /** Origin of scan relative to frame of reference; points are positioned in the x-y plane relative to this origin; angles are interpreted as counterclockwise rotations around the z axis with 0 rad being in the +x direction */
  pose: Pose;

  /** Bearing of first point, in radians */
  start_angle: number;

  /** Bearing of last point, in radians */
  end_angle: number;

  /** Distance of detections from origin; assumed to be at equally-spaced angles between \`start_angle\` and \`end_angle\` */
  ranges: number[];

  /** Intensity of detections */
  intensities: number[];
};
",
  "LinePrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { LineType } from "./LineType";
import { Point3 } from "./Point3";
import { Pose } from "./Pose";

/** A primitive representing a series of points connected by lines */
export type LinePrimitive = {
  /** Drawing primitive to use for lines */
  type: LineType;

  /** Origin of lines relative to reference frame */
  pose: Pose;

  /** Line thickness */
  thickness: number;

  /** Indicates whether \`thickness\` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false) */
  scale_invariant: boolean;

  /** Points along the line */
  points: Point3[];

  /** Solid color to use for the whole line. One of \`color\` or \`colors\` must be provided. */
  color: Color;

  /** Per-point colors (if specified, must have the same length as \`points\`). One of \`color\` or \`colors\` must be provided. */
  colors: Color[];

  /**
   * Indices into the \`points\` and \`colors\` attribute arrays, which can be used to avoid duplicating attribute data.
   * 
   * If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of \`points\` provided).
   */
  indices: number[];
};
",
  "LocationFix" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { PositionCovarianceType } from "./PositionCovarianceType";
import { Time } from "./Time";

/** A navigation satellite fix for any Global Navigation Satellite System */
export type LocationFix = {
  /** Timestamp of the message */
  timestamp: Time;

  /** Frame for the sensor. Latitude and longitude readings are at the origin of the frame. */
  frame_id: string;

  /** Latitude in degrees */
  latitude: number;

  /** Longitude in degrees */
  longitude: number;

  /** Altitude in meters */
  altitude: number;

  /** Position covariance (m^2) defined relative to a tangential plane through the reported position. The components are East, North, and Up (ENU), in row-major order. */
  position_covariance: [number, number, number, number, number, number, number, number, number];

  /** If \`position_covariance\` is available, \`position_covariance_type\` must be set to indicate the type of covariance. */
  position_covariance_type: PositionCovarianceType;
};
",
  "Log" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { LogLevel } from "./LogLevel";
import { Time } from "./Time";

/** A log message */
export type Log = {
  /** Timestamp of log message */
  timestamp: Time;

  /** Log level */
  level: LogLevel;

  /** Log message */
  message: string;

  /** Process or node name */
  name: string;

  /** Filename */
  file: string;

  /** Line number in the file */
  line: number;
};
",
  "SceneEntityDeletion" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { SceneEntityDeletionType } from "./SceneEntityDeletionType";
import { Time } from "./Time";

/** Command to remove previously published entities */
export type SceneEntityDeletion = {
  /** Timestamp of the deletion. Only matching entities earlier than this timestamp will be deleted. */
  timestamp: Time;

  /** Type of deletion action to perform */
  type: SceneEntityDeletionType;

  /** Identifier which must match if \`type\` is \`MATCHING_ID\`. */
  id: string;
};
",
  "SceneEntity" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { ArrowPrimitive } from "./ArrowPrimitive";
import { CubePrimitive } from "./CubePrimitive";
import { CylinderPrimitive } from "./CylinderPrimitive";
import { Duration } from "./Duration";
import { KeyValuePair } from "./KeyValuePair";
import { LinePrimitive } from "./LinePrimitive";
import { ModelPrimitive } from "./ModelPrimitive";
import { SpherePrimitive } from "./SpherePrimitive";
import { TextPrimitive } from "./TextPrimitive";
import { Time } from "./Time";
import { TriangleListPrimitive } from "./TriangleListPrimitive";

/** A visual element in a 3D scene. An entity may be composed of multiple primitives which all share the same frame of reference. */
export type SceneEntity = {
  /** Timestamp of the entity */
  timestamp: Time;

  /** Frame of reference */
  frame_id: string;

  /** Identifier for the entity. A entity will replace any prior entity on the same topic with the same \`id\`. */
  id: string;

  /** Length of time (relative to \`timestamp\`) after which the entity should be automatically removed. Zero value indicates the entity should remain visible until it is replaced or deleted. */
  lifetime: Duration;

  /** Whether the entity should keep its location in the fixed frame (false) or follow the frame specified in \`frame_id\` as it moves relative to the fixed frame (true) */
  frame_locked: boolean;

  /** Additional user-provided metadata associated with the entity. Keys must be unique. */
  metadata: KeyValuePair[];

  /** Arrow primitives */
  arrows: ArrowPrimitive[];

  /** Cube primitives */
  cubes: CubePrimitive[];

  /** Sphere primitives */
  spheres: SpherePrimitive[];

  /** Cylinder primitives */
  cylinders: CylinderPrimitive[];

  /** Line primitives */
  lines: LinePrimitive[];

  /** Triangle list primitives */
  triangles: TriangleListPrimitive[];

  /** Text primitives */
  texts: TextPrimitive[];

  /** Model primitives */
  models: ModelPrimitive[];
};
",
  "SceneUpdate" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { SceneEntity } from "./SceneEntity";
import { SceneEntityDeletion } from "./SceneEntityDeletion";

/** An update to the entities displayed in a 3D scene */
export type SceneUpdate = {
  /** Scene entities to delete */
  deletions: SceneEntityDeletion[];

  /** Scene entities to add or replace */
  entities: SceneEntity[];
};
",
  "ModelPrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Pose } from "./Pose";
import { Vector3 } from "./Vector3";

/** A primitive representing a 3D model file loaded from an external URL or embedded data */
export type ModelPrimitive = {
  /** Origin of model relative to reference frame */
  pose: Pose;

  /** Scale factor to apply to the model along each axis */
  scale: Vector3;

  /** Solid color to use for the whole model if \`override_color\` is true. */
  color: Color;

  /** Whether to use the color specified in \`color\` instead of any materials embedded in the original model. */
  override_color: boolean;

  /** URL pointing to model file. One of \`url\` or \`data\` should be provided. */
  url: string;

  /** [Media type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of embedded model (e.g. \`model/gltf-binary\`). Required if \`data\` is provided instead of \`url\`. Overrides the inferred media type if \`url\` is provided. */
  media_type: string;

  /** Embedded model. One of \`url\` or \`data\` should be provided. If \`data\` is provided, \`media_type\` must be set to indicate the type of the data. */
  data: Uint8Array;
};
",
  "PackedElementField" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { NumericType } from "./NumericType";

/** A field present within each element in a byte array of packed elements. */
export type PackedElementField = {
  /** Name of the field */
  name: string;

  /** Byte offset from start of data buffer */
  offset: number;

  /** Type of data in the field. Integers are stored using little-endian byte order. */
  type: NumericType;
};
",
  "Point2" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** A point representing a position in 2D space */
export type Point2 = {
  /** x coordinate position */
  x: number;

  /** y coordinate position */
  y: number;
};
",
  "Point3" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** A point representing a position in 3D space */
export type Point3 = {
  /** x coordinate position */
  x: number;

  /** y coordinate position */
  y: number;

  /** z coordinate position */
  z: number;
};
",
  "PointCloud" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { PackedElementField } from "./PackedElementField";
import { Pose } from "./Pose";
import { Time } from "./Time";

/** A collection of N-dimensional points, which may contain additional fields with information like normals, intensity, etc. */
export type PointCloud = {
  /** Timestamp of point cloud */
  timestamp: Time;

  /** Frame of reference */
  frame_id: string;

  /** The origin of the point cloud relative to the frame of reference */
  pose: Pose;

  /** Number of bytes between points in the \`data\` */
  point_stride: number;

  /** Fields in \`data\`. At least 2 coordinate fields from \`x\`, \`y\`, and \`z\` are required for each point's position; \`red\`, \`green\`, \`blue\`, and \`alpha\` are optional for customizing each point's color. */
  fields: PackedElementField[];

  /** Point data, interpreted using \`fields\` */
  data: Uint8Array;
};
",
  "PointsAnnotation" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Point2 } from "./Point2";
import { PointsAnnotationType } from "./PointsAnnotationType";
import { Time } from "./Time";

/** An array of points on a 2D image */
export type PointsAnnotation = {
  /** Timestamp of annotation */
  timestamp: Time;

  /** Type of points annotation to draw */
  type: PointsAnnotationType;

  /** Points in 2D image coordinates (pixels) */
  points: Point2[];

  /** Outline color */
  outline_color: Color;

  /** Per-point colors, if \`type\` is \`POINTS\`, or per-segment stroke colors, if \`type\` is \`LINE_LIST\`, \`LINE_STRIP\` or \`LINE_LOOP\`. */
  outline_colors: Color[];

  /** Fill color */
  fill_color: Color;

  /** Stroke thickness in pixels */
  thickness: number;
};
",
  "Pose" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Quaternion } from "./Quaternion";
import { Vector3 } from "./Vector3";

/** A position and orientation for an object or reference frame in 3D space */
export type Pose = {
  /** Point denoting position in 3D space */
  position: Vector3;

  /** Quaternion denoting orientation in 3D space */
  orientation: Quaternion;
};
",
  "PoseInFrame" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Pose } from "./Pose";
import { Time } from "./Time";

/** A timestamped pose for an object or reference frame in 3D space */
export type PoseInFrame = {
  /** Timestamp of pose */
  timestamp: Time;

  /** Frame of reference for pose position and orientation */
  frame_id: string;

  /** Pose in 3D space */
  pose: Pose;
};
",
  "PosesInFrame" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Pose } from "./Pose";
import { Time } from "./Time";

/** An array of timestamped poses for an object or reference frame in 3D space */
export type PosesInFrame = {
  /** Timestamp of pose */
  timestamp: Time;

  /** Frame of reference for pose position and orientation */
  frame_id: string;

  /** Poses in 3D space */
  poses: Pose[];
};
",
  "Quaternion" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** A [quaternion](https://eater.net/quaternions) representing a rotation in 3D space */
export type Quaternion = {
  /** x value */
  x: number;

  /** y value */
  y: number;

  /** z value */
  z: number;

  /** w value */
  w: number;
};
",
  "RawImage" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Time } from "./Time";

/** A raw image */
export type RawImage = {
  /** Timestamp of image */
  timestamp: Time;

  /** Frame of reference for the image. The origin of the frame is the optical center of the camera. +x points to the right in the image, +y points down, and +z points into the plane of the image. */
  frame_id: string;

  /** Image width */
  width: number;

  /** Image height */
  height: number;

  /**
   * Encoding of the raw image data
   * 
   * Supported values: \`8UC1\`, \`8UC3\`, \`16UC1\`, \`32FC1\`, \`bayer_bggr8\`, \`bayer_gbrg8\`, \`bayer_grbg8\`, \`bayer_rggb8\`, \`bgr8\`, \`bgra8\`, \`mono8\`, \`mono16\`, \`rgb8\`, \`rgba8\`, \`uyvy\` or \`yuv422\`, \`yuyv\` or \`yuv422_yuy2\`
   */
  encoding: string;

  /** Byte length of a single row */
  step: number;

  /** Raw image data */
  data: Uint8Array;
};
",
  "SpherePrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Pose } from "./Pose";
import { Vector3 } from "./Vector3";

/** A primitive representing a sphere or ellipsoid */
export type SpherePrimitive = {
  /** Position of the center of the sphere and orientation of the sphere */
  pose: Pose;

  /** Size (diameter) of the sphere along each axis */
  size: Vector3;

  /** Color of the sphere */
  color: Color;
};
",
  "TextAnnotation" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Point2 } from "./Point2";
import { Time } from "./Time";

/** A text label on a 2D image */
export type TextAnnotation = {
  /** Timestamp of annotation */
  timestamp: Time;

  /** Bottom-left origin of the text label in 2D image coordinates (pixels) */
  position: Point2;

  /** Text to display */
  text: string;

  /** Font size in pixels */
  font_size: number;

  /** Text color */
  text_color: Color;

  /** Background fill color */
  background_color: Color;
};
",
  "TextPrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Pose } from "./Pose";

/** A primitive representing a text label */
export type TextPrimitive = {
  /** Position of the center of the text box and orientation of the text. Identity orientation means the text is oriented in the xy-plane and flows from -x to +x. */
  pose: Pose;

  /** Whether the text should respect \`pose.orientation\` (false) or always face the camera (true) */
  billboard: boolean;

  /** Font size (height of one line of text) */
  font_size: number;

  /** Indicates whether \`font_size\` is a fixed size in screen pixels (true), or specified in world coordinates and scales with distance from the camera (false) */
  scale_invariant: boolean;

  /** Color of the text */
  color: Color;

  /** Text */
  text: string;
};
",
  "TriangleListPrimitive" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

import { Color } from "./Color";
import { Point3 } from "./Point3";
import { Pose } from "./Pose";

/** A primitive representing a set of triangles or a surface tiled by triangles */
export type TriangleListPrimitive = {
  /** Origin of triangles relative to reference frame */
  pose: Pose;

  /** Vertices to use for triangles, interpreted as a list of triples (0-1-2, 3-4-5, ...) */
  points: Point3[];

  /** Solid color to use for the whole shape. One of \`color\` or \`colors\` must be provided. */
  color: Color;

  /** Per-vertex colors (if specified, must have the same length as \`points\`). One of \`color\` or \`colors\` must be provided. */
  colors: Color[];

  /**
   * Indices into the \`points\` and \`colors\` attribute arrays, which can be used to avoid duplicating attribute data.
   * 
   * If omitted or empty, indexing will not be used. This default behavior is equivalent to specifying [0, 1, ..., N-1] for the indices (where N is the number of \`points\` provided).
   */
  indices: number[];
};
",
  "Vector2" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** A vector in 2D space that represents a direction only */
export type Vector2 = {
  /** x coordinate length */
  x: number;

  /** y coordinate length */
  y: number;
};
",
  "Vector3" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** A vector in 3D space that represents a direction only */
export type Vector3 = {
  /** x coordinate length */
  x: number;

  /** y coordinate length */
  y: number;

  /** z coordinate length */
  z: number;
};
",
  "LineType" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** An enumeration indicating how input points should be interpreted to create lines */
export enum LineType {
  /** Connected line segments: 0-1, 1-2, ..., (n-1)-n */
  LINE_STRIP = 0,

  /** Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0 */
  LINE_LOOP = 1,

  /** Individual line segments: 0-1, 2-3, 4-5, ... */
  LINE_LIST = 2,
}
",
  "LogLevel" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** Log level */
export enum LogLevel {
  UNKNOWN = 0,

  DEBUG = 1,

  INFO = 2,

  WARNING = 3,

  ERROR = 4,

  FATAL = 5,
}
",
  "SceneEntityDeletionType" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** An enumeration indicating which entities should match a SceneEntityDeletion command */
export enum SceneEntityDeletionType {
  /** Delete the existing entity on the same topic that has the provided \`id\` */
  MATCHING_ID = 0,

  /** Delete all existing entities on the same topic */
  ALL = 1,
}
",
  "NumericType" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** Numeric type */
export enum NumericType {
  UNKNOWN = 0,

  UINT8 = 1,

  INT8 = 2,

  UINT16 = 3,

  INT16 = 4,

  UINT32 = 5,

  INT32 = 6,

  FLOAT32 = 7,

  FLOAT64 = 8,
}
",
  "PointsAnnotationType" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** Type of points annotation */
export enum PointsAnnotationType {
  UNKNOWN = 0,

  /** Individual points: 0, 1, 2, ... */
  POINTS = 1,

  /** Closed polygon: 0-1, 1-2, ..., (n-1)-n, n-0 */
  LINE_LOOP = 2,

  /** Connected line segments: 0-1, 1-2, ..., (n-1)-n */
  LINE_STRIP = 3,

  /** Individual line segments: 0-1, 2-3, 4-5, ... */
  LINE_LIST = 4,
}
",
  "PositionCovarianceType" => "// Generated by https://github.com/foxglove/schemas
// Options: {}

/** Type of position covariance */
export enum PositionCovarianceType {
  UNKNOWN = 0,

  APPROXIMATED = 1,

  DIAGONAL_KNOWN = 2,

  KNOWN = 3,
}
",
  "Duration" => "export type Duration = {
  sec: number;
  nsec: number;
};
",
  "Time" => "export type Time = {
  sec: number;
  nsec: number;
};
",
  "index" => "export * from "./ArrowPrimitive";
export * from "./CameraCalibration";
export * from "./CircleAnnotation";
export * from "./Color";
export * from "./CompressedImage";
export * from "./CompressedVideo";
export * from "./CubePrimitive";
export * from "./CylinderPrimitive";
export * from "./FrameTransform";
export * from "./FrameTransforms";
export * from "./GeoJSON";
export * from "./Grid";
export * from "./ImageAnnotations";
export * from "./KeyValuePair";
export * from "./LaserScan";
export * from "./LinePrimitive";
export * from "./LineType";
export * from "./LocationFix";
export * from "./Log";
export * from "./LogLevel";
export * from "./ModelPrimitive";
export * from "./NumericType";
export * from "./PackedElementField";
export * from "./Point2";
export * from "./Point3";
export * from "./PointCloud";
export * from "./PointsAnnotation";
export * from "./PointsAnnotationType";
export * from "./Pose";
export * from "./PoseInFrame";
export * from "./PosesInFrame";
export * from "./PositionCovarianceType";
export * from "./Quaternion";
export * from "./RawImage";
export * from "./SceneEntity";
export * from "./SceneEntityDeletion";
export * from "./SceneEntityDeletionType";
export * from "./SceneUpdate";
export * from "./SpherePrimitive";
export * from "./TextAnnotation";
export * from "./TextPrimitive";
export * from "./TriangleListPrimitive";
export * from "./Vector2";
export * from "./Vector3";
",
}
`;
