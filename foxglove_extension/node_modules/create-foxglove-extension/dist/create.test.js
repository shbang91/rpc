"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const path = __importStar(require("path"));
const tmp_1 = require("tmp");
const create_1 = require("./create");
const package_1 = require("./package");
let tmpdir;
jest.setTimeout(120 * 1000);
jest.mock("./log.ts", () => ({
    info: jest.fn(),
    fatal: jest.fn((msg) => {
        throw new Error(`fatal() called: ${String(msg)}`);
    }),
}));
beforeAll(() => {
    (0, tmp_1.setGracefulCleanup)();
    tmpdir = (0, tmp_1.dirSync)({ unsafeCleanup: true }).name;
});
describe("createCommand", () => {
    it("creates a skeleton extension package", async () => {
        await (0, create_1.createCommand)({ name: "extension-test", cwd: tmpdir });
        const destDir = path.join(tmpdir, "extension-test");
        const contents = await (0, promises_1.readdir)(destDir, { withFileTypes: true });
        const dirs = contents.filter((entry) => entry.isDirectory()).map((entry) => entry.name);
        const files = contents.filter((entry) => entry.isFile()).map((entry) => entry.name);
        expect(dirs).toHaveLength(2);
        expect(dirs).toContain("node_modules");
        expect(dirs).toContain("src");
        expect(files).toContain("CHANGELOG.md");
        expect(files).toContain("package.json");
        expect(files).toContain("README.md");
        expect(files).toContain("tsconfig.json");
        expect(files).toContain("package-lock.json");
        expect(files).not.toContain("yarn.lock");
        const packageJsonStr = await (0, promises_1.readFile)(path.join(destDir, "package.json"), { encoding: "utf8" });
        expect(packageJsonStr).not.toContain("${NAME}");
        expect(packageJsonStr).toContain("extension-test");
        const packageJson = JSON.parse(packageJsonStr);
        expect(typeof packageJson.devDependencies.react).toEqual("string");
        // make sure the skeleton package is buildable and packagable
        await (0, package_1.packageCommand)({ cwd: destDir });
        // make sure we don't generate unneeded .d.ts files
        const builtContents = await (0, promises_1.readdir)(path.join(destDir, "dist"), { withFileTypes: true });
        const builtFiles = builtContents.filter((entry) => entry.isFile()).map((entry) => entry.name);
        expect(builtFiles.some((name) => name.endsWith(".d.ts"))).toBe(false);
    });
});
//# sourceMappingURL=create.test.js.map