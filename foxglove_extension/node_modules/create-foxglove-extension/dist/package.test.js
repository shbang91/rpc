"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = require("fs/promises");
const jszip_1 = __importDefault(require("jszip"));
const path = __importStar(require("path"));
const tmp_1 = require("tmp");
const package_1 = require("./package");
let tmpdir;
jest.setTimeout(120 * 1000);
jest.mock("./log.ts", () => ({
    info: jest.fn(),
    fatal: jest.fn((msg) => {
        throw new Error(`fatal() called: ${String(msg)}`);
    }),
}));
beforeAll(() => {
    (0, tmp_1.setGracefulCleanup)();
    tmpdir = (0, tmp_1.dirSync)({ unsafeCleanup: true }).name;
});
async function createFile(pathname, filename, contents = "") {
    const fullpath = path.join(pathname, filename);
    await (0, promises_1.writeFile)(fullpath, contents);
}
describe("packageCommand", () => {
    it("packages an extension", async () => {
        // Actually creating a package is slow so we can fake it instead.
        await createFile(tmpdir, "package.json", JSON.stringify({
            name: "test",
            displayName: "test",
            homepage: "http://example.com",
            publisher: "test",
            version: "1.0.0",
            main: "./dist/extension.js",
        }));
        await createFile(tmpdir, "CHANGELOG.md");
        await createFile(tmpdir, "README.md");
        await (0, promises_1.mkdir)(path.join(tmpdir, "dist"));
        await createFile(path.join(tmpdir, "dist"), "extension.js");
        await (0, package_1.packageCommand)({ cwd: tmpdir });
        const contents = await (0, promises_1.readdir)(tmpdir, { withFileTypes: true });
        const bundle = contents.find((file) => file.name === "test.test-1.0.0.foxe");
        const bundlePath = path.join(tmpdir, bundle.name);
        const bundleData = await (0, promises_1.readFile)(bundlePath);
        const archive = await jszip_1.default.loadAsync(bundleData);
        expect(archive.files["dist\\extension.js"]).not.toBeDefined();
        expect(archive.files["dist/extension.js"]).toBeDefined();
    });
});
//# sourceMappingURL=package.test.js.map